#!/usr/bin/env python

# -- Summary --------------------------------------------------------------------------------------------------------
#
#  Author  : logwriter (Rodrigo Nascimento)
#  Version : 0.1
#  Date    : December, 2017
#
# -- Why Kairos? ----------------------------------------------------------------------------------------------------
#  In the New Testament, "Kairos" refers to the right time for an action.
#  An orchastrated backup operation for a MongoDB database using snapshots has to happen in the right moment, it has
#  to be quick and crash consistent without interfering with database operations.
# -------------------------------------------------------------------------------------------------------------------

import sys
import os
import argparse
import json
import pymongo
import logging
from datetime import datetime
from time import time, sleep, strftime
from kairoslib.subcmd import SubCmdMongodb, SubCmdNetapp, SubCmdBackup, SubCmdRecovery, SubCmdClone, SubCmdRecover
from kairoslib.subcmd import SubCmdArchiver
from kairoslib.mongodbcluster import MongoDBCluster
from kairoslib.catalog import Catalog


def cmdargs():
    cmdopts = argparse.ArgumentParser(description='NetApp Data Protection for MongoDB')
    cmdopts.add_argument('--config', type=str, default='kairos.json', help='Kairos configuration file')
    cmdopts.add_argument('--log-level', choices=['info', 'error'], default='info', help='Kairos log level')
    subcmd = cmdopts.add_subparsers()

    kairos_catalog = subcmd.add_parser('catalog')
    kairos_catalog.add_argument('--create', action='store_true', help='Creates Kairos catalog database and Collections')
    kairos_catalog.set_defaults(which='catalog')

    mdb_cluster = subcmd.add_parser('mongodb')
    mdb_cluster.add_argument('--add', action='store_true', help='Add a MongoDB Cluster for Data Protection')
    mdb_cluster.add_argument('--remove', action='store_true', help='Remove a MongoDB Cluster for Data Protection')
    mdb_cluster.add_argument('--list', action='store_true', help='List MongoDB Clusters protected by Kairos')
    mdb_cluster.add_argument('--cluster-name', type=str, help='MongoDB Cluster name')
    mdb_cluster.add_argument('--uri', type=str, help='MongoDB URI connection string')
    mdb_cluster.add_argument('--auth', choices=['on', 'off'], default='off', help='MongoDB authentication enabled/disabled')
    mdb_cluster.add_argument('--auth-db', type=str, help='MongoDB authentication database')
    mdb_cluster.add_argument('--auth-user', type=str, help='MongoDB username')
    mdb_cluster.add_argument('--auth-pass', type=str, help='MongoDB password')
    mdb_cluster.add_argument('--mongod-conf', type=str, default='/etc/mongod.conf', help='MongoDB configuration file path')
    mdb_cluster.add_argument('--sharded', action='store_true', help='Indicates a sharded cluster')
    mdb_cluster.add_argument('--netapp-systems', dest='ntapsys', nargs='+', help='NetApp system(s) where your MongoDB '
                                                                                'is deployed')
    mdb_cluster.set_defaults(which='mongodb')

    ntap_system = subcmd.add_parser('netapp')
    ntap_system.add_argument('--add', action='store_true', help='Add a NetApp System')
    ntap_system.add_argument('--remove', action='store_true', help='Remove a NetApp System')
    ntap_system.add_argument('--list', action='store_true', help='List NetApp Systems')
    ntap_system.add_argument('--netapp-ip', type=str, help='NetApp Cluster IP address')
    ntap_system.add_argument('--username', type=str, help='NetApp user (admin, vsadmin)')
    ntap_system.add_argument('--password', type=str, help='NetApp user password')
    ntap_system.add_argument('--svm-name', type=str, help='NetApp SVM name')
    ntap_system.set_defaults(which='netapp')

    backup = subcmd.add_parser('backup')
    backup.add_argument('--create', action='store_true', help='Create a backup of a MongoDB cluster')
    backup.add_argument('--delete', action='store_true', help='Delete a backup of a MongoDB cluster')
    backup.add_argument('--list', action='store_true', help='List all backups of a MongoDB cluster')
    backup.add_argument('--search-for-db', type=str, help='Search for backups containing databases within a keyword')
    backup.add_argument('--search-for-collection', type=str, help='Search for backups containing collections '
                                                                  'within a keyword')
    backup.add_argument('--cluster-name', type=str, help='MongoDB cluster name')
    backup.add_argument('--backup-name', type=str, help='Backup name')
    backup.add_argument('--retention', type=str, help='Backup retention [ 15m(in), 1h(our), 1d(ay), 1w(eek) ]')
    backup.set_defaults(which='backup')

    restore = subcmd.add_parser('restore')
    restore.add_argument('--backup-name', type=str, help='Backup name')
    restore.add_argument('--cluster-name', type=str, help='MongoDB Cluster name')
    restore.set_defaults(which='restore')

    recover = subcmd.add_parser('recover')
    recover.add_argument('--from-cluster-name', type=str, help='Archived operations from a given MongoDB cluster.')
    recover.add_argument('--dest-mongodb-uri', type=str, help='MongoDB Cluster where the archived operations will be applied to.')
    recover.add_argument('--begin-from', type=str, help='')
    recover.add_argument('--until', type=str, help='')
    recover.set_defaults(which='recover')

    clone = subcmd.add_parser('clone')
    clone.add_argument('--create', action='store_true', help='Create a clone')
    clone.add_argument('--delete', action='store_true', help='Delete a clone')
    clone.add_argument('--list', action='store_true', help='List clones')
    clone.add_argument('--cluster-name', type=str, help='MongoDB Cluster name to be cloned')
    clone.add_argument('--clone-name', type=str, help='Clone name')
    clone.add_argument('--backup-name', type=str, help='Backup name to be used as the baseline for your clone')
    clone.add_argument('--clone-spec', type=str, help='Clone specification file')
    clone.add_argument('--desc', type=str, help='Description about your clone')
    clone.set_defaults(which='clone')

    oplog = subcmd.add_parser('archiver')
    oplog.add_argument('--create', action='store_true', help='Create an oplog archiver for a given cluster')
    oplog.add_argument('--delete', action='store_true', help='Delete an oplog archiver from a given cluster')
    oplog.add_argument('--list', action='store_true', help='List all oplog archivers for a given mongodb cluster')
    oplog.add_argument('--list-ops', action='store_true', help='List the first and last archived op per database')
    oplog.add_argument('--start', action='store_true', help='Start an Oplog Archiver')
    oplog.add_argument('--stop', action='store_true', help='Stop an Oplog Archiver')
    oplog.add_argument('--status', action='store_true', help='Show the status of each archiver process.')
    oplog.add_argument('--cluster-name', type=str, help='MongoDB Cluster name')
    oplog.add_argument('--archiver-name', type=str, help='Oplog Archiver name')
    oplog.add_argument('--db-name', type=str, help='Database name')
    oplog.add_argument('--collections', dest='collections_list', nargs='+', help='List of collections')
    oplog.set_defaults(which='archiver')

    return vars(cmdopts.parse_args())


def load_config_file(config_file=None):
    with open(config_file, 'r') as cfgfile:
        kconfig = json.load(cfgfile)
        return kconfig


def main():
    # -- Parsing CLI arguments
    cliargs = cmdargs()

    # -- Parsing kairos' config file
    kcfg = load_config_file(cliargs['config'])

    # -- Preparing logger
    if cliargs['log_level'] == 'info':
        logging.basicConfig(format='%(asctime)s :: %(levelname)s :: %(message)s',
                            level=logging.INFO,
                            handlers=[
                                logging.FileHandler(filename='kairos_dp.log'),
                                logging.StreamHandler()
                            ])
    elif cliargs['log_level'] == 'error':
        logging.basicConfig(format='%(asctime)s :: %(levelname)s :: %(message)s',
                            level=logging.ERROR,
                            handlers=[
                                logging.FileHandler(filename='kairos_dp.log'),
                                logging.StreamHandler()
                            ])
    else:
        logging.basicConfig(format='%(asctime)s :: %(levelname)s :: %(message)s',
                            level=logging.NOTSET,
                            handlers=[
                                logging.FileHandler(filename='kairos_dp.log'),
                                logging.StreamHandler()
                            ])

    # -- Opening a session with the repository database
    try:
        dbsession = pymongo.MongoClient(kcfg['kairos-repo']['repo-uri'], connect=True)
        kairos_repo = dbsession[kcfg['kairos-repo']['db-name']]
    except:
        logging.error('Connection to the database repository failed.')
        sys.exit(1)

    catalog = Catalog(repo_uri=kcfg['kairos-repo']['repo-uri'], repo_name=kcfg['kairos-repo']['db-name'])
    catalog.connect()

    # -- If subcommand is catalog
    if cliargs['which'] == 'catalog':
        if cliargs['create']:
            catalog.create()

    # -- If subcommand is mongodb
    if cliargs['which'] == 'mongodb':
        mdb_spec = dict()
        mdb_spec['cluster-name'] = cliargs['cluster_name']
        mdb_spec['mongodb-uri'] = cliargs['uri']
        mdb_spec['mongodb-auth'] = cliargs['auth']
        mdb_spec['mongodb-auth-db'] = cliargs['auth_db']
        mdb_spec['mongodb-auth-user'] = cliargs['auth_user']
        mdb_spec['mongodb-auth-pass'] = cliargs['auth_pass']
        mdb_spec['mongodb-mongod-conf'] = cliargs['mongod_conf']
        mdb_spec['netapp-systems'] = cliargs['ntapsys']
        mdb_spec['sharded'] = cliargs['sharded']

        mongo = SubCmdMongodb(mdb_spec)

        if cliargs['add']:
            if (mdb_spec['cluster-name'] is None) or (mdb_spec['mongodb-uri'] is None) or (
                mdb_spec['netapp-systems'] is None):
                logging.error('cluster-name, mongodb-uri and netapp-systems are required to add a new mongodb cluster.')
                sys.exit(1)
            else:
                ntapsystems = kairos_repo['ntapsystems']
                for ntapsys in mdb_spec['netapp-systems']:
                    result = ntapsystems.find_one({'netapp-ip': ntapsys})
                    if result is None:
                        logging.error('NetApp system ' + ntapsys + ' does not exist in the catalog.')
                        sys.exit(1)
                mongo.add(kairos_repo, 'mdbclusters')
                sys.exit(0)

        if cliargs['remove']:
            if mdb_spec['cluster-name'] is not None:
                mongo.remove(kairos_repo, 'mdbclusters')
                sys.exit(0)
            else:
                logging.error('cluster-name required to remove a MongoDB cluster.')
                sys.exit(1)

        if cliargs['list']:
            list_all = mongo.list(kairos_repo, 'mdbclusters')
            for mdb in list_all:
                if mdb['mongodb-auth'] == 'on':
                    print 'Cluster Name        : {}'.format(mdb['cluster-name'])
                    print 'Connection String   : {}'.format(mdb['mongodb-uri'])
                    print 'Sharded             : {}'.format(mdb['sharded'])
                    print 'MongoDB Auth Status : {}'.format(mdb['mongodb-auth'])
                    print 'Authentication DB   : {}'.format(mdb['mongodb-auth-db'])
                    print 'Username            : {}'.format(mdb['mongodb-auth-user'])
                    print 'Password            : {}'.format(''.join(['*' for letter in mdb['mongodb-auth-pass']]))
                    print 'Storage Systems     : {}'.format(' '.join(ntap for ntap in mdb['netapp-systems']))
                    print ''
                else:
                    print 'Cluster Name        : {}'.format(mdb['cluster-name'])
                    print 'MongoDB Auth Status : {}'.format(mdb['mongodb-auth'])
                    print 'Sharded             : {}'.format(mdb['sharded'])
                    print 'Connection String   : {}'.format(mdb['mongodb-uri'])
                    print 'Storage Systems     : {}'.format(' '.join(ntap for ntap in mdb['netapp-systems']))
                    print ''

            sys.exit(0)

    # -- If subcommand is netapp
    if cliargs['which'] == 'netapp':
        ntap_spec = dict()
        ntap_spec['netapp-ip'] = cliargs['netapp_ip']
        ntap_spec['username'] = cliargs['username']
        ntap_spec['password'] = cliargs['password']
        ntap_spec['svm-name'] = cliargs['svm_name']

        netapp = SubCmdNetapp(ntap_spec)

        if cliargs['add']:
            if (ntap_spec['netapp-ip'] is None) or (ntap_spec['username'] is None) or (ntap_spec['password'] is None):
                logging.error('netapp-ip, username and password are required to add a new system.')
                sys.exit(1)
            else:
                netapp.add(kairos_repo, 'ntapsystems')
                sys.exit(0)

        if cliargs['remove']:
            if ntap_spec['netapp-ip'] is not None:
                #TODO: Check dependency on mdb_clusters, backups and clones before deleting a NetApp system
                deleted_count = netapp.remove(kairos_repo, 'ntapsystems')
                if deleted_count != 0:
                    logging.info('NetApp system ' + ntap_spec['netapp-ip'] + ' has been removed.')
                    sys.exit(0)
                else:
                    logging.error('NetApp system ' + ntap_spec['netapp-ip'] + ' not found.')
                    sys.exit(1)
            else:
                logging.error('netapp-ip is required to remove a NetApp system.')
                sys.exit(1)

        if cliargs['list']:
            list_all = netapp.list(kairos_repo, 'ntapsystems')
            for ntap in list_all:
                print 'Storage System IP : {}'.format(ntap['netapp-ip'])
                print 'Username          : {}'.format(ntap['username'])
                print 'Password          : {}'.format(''.join(['*' for letter in ntap['password']]))
                print 'SVM name          : {}'.format(ntap['svm-name'])
                print ''

            sys.exit(0)

    # -- If subcommand is backup
    if cliargs['which'] == 'backup':
        backup_spec = dict()
        backup_spec['cluster-name'] = cliargs['cluster_name']
        backup_spec['backup-name'] = cliargs['backup_name']
        backup_spec['retention'] = cliargs['retention']
        backup_spec['username'] = kcfg['kairos']['username']

        backup = SubCmdBackup(backup_spec)

        if cliargs['create']:
            if (backup_spec['cluster-name'] is None) or (backup_spec['backup-name'] is None) or (
                backup_spec['retention'] is None):
                logging.error('cluster-name is required to create a backup.')
                sys.exit(1)
            else:
                backup.create(kairos_repo)
                sys.exit(0)

        if cliargs['list']:
            if backup_spec['cluster-name'] is None:
                logging.error('You must enter a cluster-name to list all the backups of a given MongoDB cluster.')
                sys.exit(1)
            else:
                backup.list_all(kairos_repo)
                sys.exit(0)

        if cliargs['search_for_db'] and not cliargs['search_for_collection']:
            if backup_spec['cluster-name'] is None:
                logging.error('You must enter a cluster-name to list all the backups of a given MongoDB cluster.')
                sys.exit(1)
            else:
                backup.search_for_db(kairos_repo, cliargs['search_for_db'])
                sys.exit(0)
        elif cliargs['search_for_db'] and cliargs['search_for_collection']:
            if backup_spec['cluster-name'] is None:
                logging.error('You must enter a cluster-name to list all the backups of a given MongoDB cluster.')
                sys.exit(1)
            else:
                backup.search_for_collection(kairos_repo, cliargs['search_for_db'], cliargs['search_for_collection'])
                sys.exit(0)

        if cliargs['delete']:
            if (backup_spec['cluster-name'] is None) or (backup_spec['backup-name'] is None):
                logging.error('You must enter a cluster-name and a backup-name to delete a backup.')
                sys.exit(1)
            else:
                backup.delete(kairos_repo)
                sys.exit(0)

    # -- If subcommand is restore
    if cliargs['which'] == 'restore':
        restore_spec = dict()
        restore_spec['backup-name'] = cliargs['backup_name']
        restore_spec['cluster-name'] = cliargs['cluster_name']
        restore_spec['username'] = kcfg['kairos']['username']

        pit_restore = SubCmdRecovery(restore_spec)

        if (restore_spec['cluster-name'] is None) or (restore_spec['backup-name'] is None):
            logging.error('You must enter a cluster-name and a backup-name to be able to trigger a restore.')
            sys.exit(1)
        else:
            pit_restore.restore(kairos_repo)
            sys.exit(0)

    # -- if subcommand is recover
    if cliargs['which'] == 'recover':
        recover_spec = dict()
        recover_spec['from-cluster-name'] = cliargs['from_cluster_name']
        recover_spec['dest-mongodb-uri'] = cliargs['dest_mongodb_uri']
        recover_spec['until'] = cliargs['until']
        recover_spec['arch-repo-uri'] = kcfg['kairos-oplog-archive']['archiver-uri']
        recover_spec['arch-repo-name'] = kcfg['kairos-oplog-archive']['archiver-dbname']
        # -- validating date format before to create the recover object
        if len(cliargs['begin_from']) == 19:
            recover_spec['begin-from'] = datetime.strptime(cliargs['begin_from'], '%Y-%m-%d %H:%M:%S')
        elif len(cliargs['begin_from']) == 26:
            recover_spec['begin-from'] = datetime.strptime(cliargs['begin_from'], '%Y-%m-%d %H:%M:%S.%f')
        else:
            logging.error('--begin-from Invalid date and time format.')
            exit(1)
        # -- validating date format before to create the recover object
        if len(cliargs['until']) == 19:
            recover_spec['until'] = datetime.strptime(cliargs['until'], '%Y-%m-%d %H:%M:%S')
        elif len(cliargs['until']) == 26:
            recover_spec['until'] = datetime.strptime(cliargs['until'], '%Y-%m-%d %H:%M:%S.%f')
        else:
            logging.error('--until Invalid date and time format.')
            exit(1)

        pit_recover = SubCmdRecover(recover_spec)

        pit_recover.start()

    # -- If subcommand is clone
    if cliargs['which'] == 'clone':
        clone_args = dict()
        clone_args['clone-name'] = cliargs['clone_name']
        clone_args['username'] = kcfg['kairos']['username']
        if cliargs['desc'] is not None:
            clone_args['desc'] = cliargs['desc']
        else:
            clone_args['desc'] = None

        if cliargs['backup_name'] is not None:
            clone_args['backup-name'] = cliargs['backup_name']
        else:
            clone_args['backup-name'] = None
        if cliargs['cluster_name'] is not None:
            clone_args['cluster-name'] = cliargs['cluster_name']
        else:
            clone_args['cluster-name'] = None

        if cliargs['clone_spec'] is not None:
            with open(cliargs['clone_spec'], 'r') as cs:
                clone_args['clone-spec'] = json.load(cs)
        else:
            clone_args['clone-spec'] = None

        clone = SubCmdClone(clone_args)

        if cliargs['create']:
            if (cliargs['cluster_name'] is None) or (cliargs['backup_name'] is None) or (cliargs['clone_name'] is None):
                logging.error('You must enter a cluster-name, a backup-name, and a clone-name to create a clone')
                sys.exit(1)
            else:
                clone.create_storage_clone(kairos_repo)
                sys.exit(0)

        if cliargs['delete']:
            if cliargs['clone_name'] is None:
                logging.error('You must enter a clone-name to delete a clone')
                sys.exit(1)
            else:
                clone.delete(kairos_repo)
                sys.exit(0)

        if cliargs['list']:
            if cliargs['cluster_name'] is None:
                logging.error('You must enter a clone-name and cluster-name to list your clones.')
                sys.exit(1)
            else:
                clone.list(kairos_repo)
                sys.exit(0)

    # -- if subcommand is archiver
    if cliargs['which'] == 'archiver':
        if cliargs['create']:
            if (cliargs['archiver_name'] is None) or (cliargs['cluster_name'] is None) or (cliargs['db_name'] is None) \
                    or (cliargs['collections_list'] is None):
                logging.error('Provide an archiver name, mongodb cluster name, a retention, database name and a list '
                              'of collections to create an oplog archiver.')
                sys.exit(1)
            else:
                mdbcluster = catalog.find_one(coll_name='mdbclusters', query={'cluster-name': cliargs['cluster_name']})
                if mdbcluster is None:
                    logging.error('Could not find {} MongoDB Cluster in Kairos repository.'.format(cliargs['cluster_name']))
                    sys.exit(1)
                else:
                    arch_spec = dict()
                    arch_spec['cluster_name'] = cliargs['cluster_name']
                    arch_spec['archiver_name'] = cliargs['archiver_name']
                    arch_spec['database_name'] = cliargs['db_name']
                    arch_spec['collections'] = cliargs['collections_list']
                    arch = SubCmdArchiver(archiver_spec=arch_spec)

                    arch.create(catalog_sess=catalog)
                    logging.info('Archiver {} has been created for {} cluster.'.format(cliargs['archiver_name'],
                                                                                       cliargs['cluster_name']))
                    sys.exit(0)

        if cliargs['delete']:
            if (cliargs['archiver_name'] is None) or (cliargs['cluster_name'] is None):
                logging.error('You must enter a MongoDB Cluster, and an archiver name to delete an oplog archiver.')
                sys.exit(1)
            else:
                arch_spec = dict()
                arch_spec['cluster_name'] = cliargs['cluster_name']
                arch_spec['archiver_name'] = cliargs['archiver_name']
                arch = SubCmdArchiver(archiver_spec=arch_spec)

                arch.delete(catalog_sess=catalog)
                logging.info('Archiver {} on Cluster {} has been successfully deleted.'.format(cliargs['archiver_name'],
                                                                                               cliargs['cluster_name']))
                sys.exit(0)

        if cliargs['list']:
            if cliargs['cluster_name'] is None:
                logging.error('You have to specify a cluster name to get a list of the archivers.')
                sys.exit(1)
            else:
                for archiver in SubCmdArchiver.list(catalog_sess=catalog, cluster_name=cliargs['cluster_name']):
                    print 'Cluster Name     : {}'.format(archiver['cluster_name'])
                    print 'Archiver Name    : {}'.format(archiver['archiver_name'])
                    print 'Database Name    : {}'.format(archiver['database_name'])
                    print 'Collections List : {}'.format(
                        ' '.join([collection for collection in archiver['collections']]))
                    print ''

                sys.exit(0)

        if cliargs['start']:
            if (cliargs['archiver_name'] is None) or (cliargs['cluster_name'] is None):
                logging.error('You must enter a MongoDB Cluster, and an archiver name to start an oplog archiver.')
                sys.exit(1)
            else:
                archiver = catalog.find_one(coll_name='archivers', query={'cluster_name': cliargs['cluster_name'],
                                                                               'archiver_name': cliargs['archiver_name']
                                                                               })
                if archiver is None:
                    logging.error('Could not find archiver {} for cluster {}.'.format(cliargs['archiver_name'],
                                                                                      cliargs['cluster_name']))
                    sys.exit(1)
                else:
                    mdbcluster = catalog.find_one(coll_name='mdbclusters', query={'cluster-name': archiver['cluster_name']})
                    if mdbcluster['sharded']:
                        mongocluster = MongoDBCluster(mongodb_uri=mdbcluster['mongodb-uri'])
                        mongouri = mongocluster.get_mongos_uri()
                    else:
                        mongouri = mdbcluster['mongodb-uri']

                    # variable archiver has been used as arch_spec; adding: mongouri, archive_repo_name,
                    # archive_repo_uri
                    archiver['mongodb_uri'] = mongouri
                    archiver['archive_repo_uri'] = kcfg['kairos-oplog-archive']['archiver-uri']
                    archiver['archive_repo_name'] = kcfg['kairos-oplog-archive']['archiver-dbname']
                    arch = SubCmdArchiver(archiver_spec=archiver)

                    arch.start(catalog_sess=catalog)

        if cliargs['stop']:
            if (cliargs['archiver_name'] is None) or (cliargs['cluster_name'] is None):
                logging.error('You must enter a MongoDB Cluster, and an archiver name to start an oplog archiver.')
                sys.exit(1)
            else:
                # Checking if the archiver provided by the user actually exists in the repository
                archiver = catalog.find_one(coll_name='archivers', query={'cluster_name': cliargs['cluster_name'],
                                                                          'archiver_name': cliargs['archiver_name']
                                                                          })
                if archiver is None:
                    logging.error('Could not find archiver {} for cluster {}.'.format(cliargs['archiver_name'],
                                                                                      cliargs['cluster_name']))
                    sys.exit(1)
                else:
                    if 'pidfile' in archiver:
                        # Getting the archiver process pid
                        with open(archiver['pidfile'], 'r') as pidfile:
                            ppid = pidfile.readline()

                        arch_spec = dict()
                        arch_spec['cluster_name'] = archiver['cluster_name']
                        arch_spec['archiver_name'] = archiver['archiver_name']
                        arch_spec['ppid'] = ppid
                        arch = SubCmdArchiver(archiver_spec=arch_spec)

                        arch.stop(catalog_sess=catalog)
                        logging.info('Archiver {} for cluster {} has been stopped.'.format(archiver['archiver_name'],
                                                                                           archiver['cluster_name']))
                        sys.exit(0)
                    else:
                        logging.error('There is no archiver {} running for cluster {}.'.format(archiver['archiver_name'],
                                                                                               archiver['cluster_name']))
                        sys.exit(1)

        if cliargs['status']:
            if cliargs['cluster_name'] is None:
                logging.error('You have to specify a MongoDB cluster name.')
                sys.exit(1)
            else:
                for archiver in SubCmdArchiver.list(catalog_sess=catalog, cluster_name=cliargs['cluster_name']):
                    arch_status = SubCmdArchiver(archiver_spec=archiver)
                    if arch_status.status(catalog_sess=catalog):
                        print 'Archiver Name: {} \t\t Status: {}'.format(archiver['archiver_name'], 'Running')
                    else:
                        print 'Archiver Name: {} \t\t Status: {}'.format(archiver['archiver_name'], 'Not running')

        if cliargs['list_ops']:
            if cliargs['cluster_name'] is None:
                logging.error('You must enter a MongoDB Cluster to list the archived operations per database.')
                sys.exit(1)
            else:
                op_catalog_sess = Catalog(repo_uri=kcfg['kairos-oplog-archive']['archiver-uri'],
                                          repo_name=kcfg['kairos-oplog-archive']['archiver-dbname'])
                op_catalog_sess.connect()

                # Aggregation query to list the first and last operation grouped by database
                pipeline = [{'$sort': {'created_at': 1}},
                            {'$group': {'_id': '$ns.db', 'firstOperation': {'$first': '$created_at'},
                                        'lastOperation': {'$last': '$created_at'}}}]

                ops = op_catalog_sess.run_aggregation(coll_name=cliargs['cluster_name'], aggr_pipeline=pipeline)
                for op in ops:
                    print 'Database Name        : {}'.format(op['_id'])
                    print 'First Op Date & Time : {}'.format(op['firstOperation'])
                    print 'Last Op Date & Time  : {}'.format(op['lastOperation'])
                    print ''

if __name__ == '__main__':
    main()
